// Code generated by hertz generator.

package user_gorm

import (
	"context"

	"github.com/ahang7/go-hello/cloudwego/hertz/biz_demo/hertz_gorm/biz/dal/mysql"
	user_gorm "github.com/ahang7/go-hello/cloudwego/hertz/biz_demo/hertz_gorm/biz/hertz_gen/user_gorm"
	"github.com/ahang7/go-hello/cloudwego/hertz/biz_demo/hertz_gorm/biz/model"
	"github.com/ahang7/go-hello/cloudwego/hertz/biz_demo/hertz_gorm/biz/pack"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateUser .
// @router /v1/user/create [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &user_gorm.CreateUserResponse{Code: user_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	if err = mysql.CreateUser([]*model.User{
		{
			Name:      req.Name,
			Gender:    int64(req.Gender),
			Age:       req.Age,
			Introduce: req.Introduce,
		},
	}); err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.CreateUserResponse{Code: user_gorm.Code_DBError, Msg: err.Error()})
		return
	}

	resp := new(user_gorm.CreateUserResponse)
	resp.Code = user_gorm.Code_Success
	c.JSON(consts.StatusOK, resp)
}

// QueryUser .
// @router /v1/user/query [GET]
func QueryUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.QueryUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &user_gorm.QueryUserResponse{Code: user_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	users, total, err := mysql.QueryUser(req.Keyword, req.Page, req.PageSize)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.QueryUserResponse{Code: user_gorm.Code_DBError, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &user_gorm.QueryUserResponse{Code: user_gorm.Code_Success, Msg: "success", Users: pack.Users(users), Total: total})
}

// DeleteUser .
// @router /v1/user/delete/:user_id [DELETE]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.DeleteUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &user_gorm.DeleteUserResponse{Code: user_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	if err = mysql.DeleteUser(req.UserID); err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.DeleteUserResponse{Code: user_gorm.Code_DBError, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &user_gorm.DeleteUserResponse{Code: user_gorm.Code_Success, Msg: "success"})
}

// UpdateUser .
// @router /v1/user/update/:user_id [PUT]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_gorm.UpdateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &user_gorm.UpdateUserResponse{Code: user_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	u := &model.User{}
	u.ID = uint(req.UserID)
	u.Name = req.Name
	u.Gender = int64(req.Gender)
	u.Introduce = req.Introduce
	u.Age = req.Age

	if err := mysql.UpdateUser(u); err != nil {
		c.JSON(consts.StatusInternalServerError, &user_gorm.UpdateUserResponse{Code: user_gorm.Code_DBError, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &user_gorm.UpdateUserResponse{Code: user_gorm.Code_Success, Msg: "success"})
}
